doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Extra Special Modules

    link(rel='stylesheet', type='text/css', href='build/build.css')

  style.
    .hello {
      background-image: url('images/hello-tharr.gif')
    }
    .nye {
      background-image: url('images/nye.gif')
    }
    .flag {
      background-image: url('images/flag.gif')
    }
    .grumpy {
      background-image: url('images/grumpy.gif')
    }
    .gethere {
      background-image: url('images/gethere.gif')
    }
    .package {
      background-image: url('images/package.gif')
    }
    .heart {
      background-image: url('images/heart.gif')
    }
    .spidey {
      background-image: url('images/spidey.jpg')
    }
    .universe {
      background-image: url('images/universe.gif')
    }
    .land {
      background-image: url('images/land.gif')
    }
    .danger {
      background-image: url('images/danger.gif')
    }
    .danger2 {
      background-image: url('images/danger2.gif')
    }
    .danger3 {
      background-image: url('images/danger3.gif')
    }
    .danger4 {
      background-image: url('images/danger4.gif')
    }
    .babel {
      background-image: url('images/babel.gif')
    }
    .lemon {
      background-image: url('images/lemon.gif')
    }
    .lolwut {
      background-image: url('images/lolwut.gif')
    }
    .cowpath {
      background-image: url('images/cowpath.jpg')
    }
    .gloss {
      background-image: url('images/lol-gloss.gif')
    }
    .loader {
      background-image: url('images/loader.gif')
    }
    .bear {
      background-image: url('images/bear.gif')
    }
    .fork {
      background-image: url('images/fork.gif')
    }
    .kernel {
      background-image: url('images/kernel.gif')
    }
    .esm-drawn {
      background-image: url('images/esm-drawn.jpg')
    }
    .cjs-drawn {
      background-image: url('images/cjs-drawn.jpg')
    }
    .interop {
      background-image: url('images/interop.jpg')
    }
    .transparent-interop {
      background-image: url('images/transparent-interop.jpg')
    }
    .goal {
      background-image: url('images/goal.gif')
    }
    .bears {
      background-image: url('images/bears.gif')
    }
    .specifier {
      background-image: url('images/specifier.jpg')
    }
    .skeleton-package {
      background-image: url('images/skeleton-package.gif')
    }
    .rip {
      background-image: url('images/rip.gif')
    }
    .landed {
      background-image: url('images/landed.gif')
    }
    .graph {
      background-image: url('images/graph.jpg')
    }
    .pre-one {
      background-image: url('images/graph-preorder-1.jpg')
    }
    .pre-two {
      background-image: url('images/graph-preorder-2.jpg')
    }
    .pre-three {
      background-image: url('images/graph-preorder-3.jpg')
    }
    .pre-four {
      background-image: url('images/graph-preorder-4.jpg')
    }
    .pre-five {
      background-image: url('images/graph-preorder-5.jpg')
    }
    .post-one {
      background-image: url('images/graph-postorder-1.jpg')
    }
    .post-two {
      background-image: url('images/graph-postorder-2.jpg')
    }
    .post-three {
      background-image: url('images/graph-postorder-3.jpg')
    }
    .post-four {
      background-image: url('images/graph-postorder-4.jpg')
    }
    .post-five {
      background-image: url('images/graph-postorder-5.jpg')
    }
    .modules-team-init {
      background-image: url('images/modules-team-init.png')
    }
    .dual-mode {
      background-image: url('images/dual-mode.gif')
    }
    

  body

    article

      section
        h2 Extra Special Modules:
        h4 A tale of two loaders
        h3 With your host
        h4
          a(href='https://twitter.com/MylesBorins') @MylesBorins
        p  Node Day 2019
        
      section(data-bespoke-backdrop='hello')
        h1 oh hai
        
      section
        h1 My Name is Myles
        img.headroom(src='images/me.jpg' alt='itsa me!' width='200px' height='200px')
      
      section
        h3 I am gainfully employed by Google as a Developer Advocate
        h4 Focusing on the Node.js ecosystem and GCP
        
        img(src='images/gcp.png' alt='Google Cloud Platform' style='background-color:white;')
        
        h5.headroom The opinions expressed in this talk are solely my own

      section
        h1 A glossary

      section(data-bespoke-backdrop='esm-drawn')
        h2 ESM
        h3 ECMA Script Modules

      section(data-bespoke-backdrop='cjs-drawn')
        h2 CJS
        h3 CommonJS Modules

      section(data-bespoke-backdrop='interop')
        h2 Interoperability
        h3 The ability to access ESM modules from CJS and vice versa

      section(data-bespoke-backdrop='transparent-interop')
        h2 Transparent Interoperability
        h3 The ability to require ESM in CJS and import CJS in ESM
        h3 without having to know the module type of dependency

      section(data-bespoke-backdrop='goal')
        h2 “Goal”
        h3 a pairing of a top-level grammar and top-level execution mode

      section(data-bespoke-backdrop='specifier')
        h2 Specifier
        h3 A string that the runtime will use to locate a module

      section
        h2 Specifier Resolution
        h3 The algorithm to convert a specifier into a path to a module

      section(data-bespoke-backdrop='bears')
        h2 Bare Imports
        h3 A specifier that does not start with a relative or absolute path
        h3 e.g. require('underscore') or import 'lodash'

      section(data-bespoke-backdrop='dual-mode')
        h2 Dual-Mode modules
        h3 Supporting both a CommonJS and ESM entry point
        h3 With a single specifier

      section
        h2 Existential Dread
        h3 The feeling I get trying to get CJS and ESM to play nicely together

      section(data-bespoke-backdrop='gethere')

      section(data-bespoke-backdrop='skeleton-package')
        h2 ES4 introduced
        h3 the concept of packages

      section
        h2 Similar to c++ namespaces
        h3 Intent was to create something like the Java Jar System

      section(data-bespoke-backdrop='rip')
        h3 Ripped out of standards track
        h2 Never seen again

      section
        h2 CommonJS is introduced
        h3 with members of TC39 working on it.
        h4 Not on standards tracks
        h5 Intended for serverside JS

      section
        h3 Node.js Implements
        h2 a variant of CommmonJS

      section
        h1 Don't forget AMD
      
      section
        h2 Only "spec'd" by requireJS
        h3 More of a convention

      section(data-bespoke-backdrop='universe')
        h1 Why not UMD?

      section(data-bespoke-backdrop='landed')
        h1 ESModules landed in ecma262 in 2015

      section(data-bespoke-backdrop='loader')
        h3 Please wait...
        h2 Explanation Loading

      section
        h2 Loader
        h3 a generic term for a workflow
        ul
          li.hide
          li Fetch
          li Transform
          li Evaluation Hook
      //-
      //- section(data-bespoke-backdrop='danger')
      //-   h3 ⚠️  DANGER  ⚠️
      //-   h2 Behavior Difference
      //-   h2 Will Robinson
      //-   h3 ⚠️  DANGER  ⚠️

      section
        h3 CommonJS has
        h2 Synchronous Load
        h2 +
        h2 Inline Execution

      section
        h1 No Load Step

      section(data-bespoke-backdrop='babel')
        h1 This is how babel was originally implemented esm

      section
        h3 ESModules specify
        h2 Asynchronous Load
        h2 +
        h2 Synchronous Execution

      section
        h2 Load
        ul
          li.hide
          li Fetch source texts for *all* the module graph
          li Resolve specifiers within source texts

      section
        h2 Link
        ul
          li.hide
          li Module Graph must be in memory
          li Executed in pre-order traversal (Root, Left, Right)

      section(data-bespoke-backdrop='graph')
      //- section
        //- img.headroom(src='images/graph.jpg' alt='A graph. Root depends on A and B. A depends on C and D.' width='60%')

      section(data-bespoke-backdrop='pre-one')
      //- section
        //- img.headroom(src='images/graph-preorder-1.jpg' alt='first node travelled to' width='60%')
      section(data-bespoke-backdrop='pre-two')
      //- section
        //- img.headroom(src='images/graph-preorder-2.jpg' alt='second node travelled to' width='60%')
      section(data-bespoke-backdrop='pre-three')
      //- section
        //- img.headroom(src='images/graph-preorder-3.jpg' alt='third node travelled to' width='60%')
      section(data-bespoke-backdrop='pre-four')
      //- section
        //- img.headroom(src='images/graph-preorder-4.jpg' alt='fourth node travelled to' width='60%')
      section(data-bespoke-backdrop='pre-five')
      //- section
        //- img.headroom(src='images/graph-preorder-5.jpg' alt='fifth node travelled to' width='60%')
      section
        h2 Execution
        ul
          li.hide
          li Requires linked be completed
          li Done in post-order traversal (Left, Right, Root)

      section(data-bespoke-backdrop='graph')
      section(data-bespoke-backdrop='post-one')
      section(data-bespoke-backdrop='post-two')
      section(data-bespoke-backdrop='post-three')
      section(data-bespoke-backdrop='post-four')
      section(data-bespoke-backdrop='post-five')

      section
        h2 Top-Level Await
        h3 Changes synchronous execution guarantee
        h4 come ask me about this later

      section
        h2 The Loader is not specified
        h3 Implemented by embedder

      section
        h1 You cannot simply convert CJS to ESM
      //-
      //- section
      //-   h2 Can result in different execution order

      //- section(data-bespoke-backdrop='danger2')
      //-   h3 ⚠️  DANGER  ⚠️
      //-   h2 Behavior Difference
      //-   h2 Will Robinson
      //-   h3 ⚠️  DANGER  ⚠️

      section
        h2 Specifier Resolution algorithm...
        h3 ...is different!

      section
        h3 TC39 Leaves it up to hosting environment
        h2 To determine Resolution

      section
        h2 Node.js's CJS resolution algorithm supports:
        ul
          li.hide
          li Bare imports
          li JSON
          li Native Dependencies
          li Optional File Extensions
          li Directory loading via index.js

      section(data-bespoke-backdrop='bear')
        h1 Currently the web does not support bare imports

      section
        h2 import-maps
        h3 https://github.com/WICG/import-maps/
        h4 Will allow browsers to support:
        ul
          li.hide
          li bare imports
          li deep module traversal by filename
          li deep module traversal by reference

      section.small-code
        pre
          code.language-javascript.
            {
              "imports": {
                "moment": "/node_modules/moment/src/moment.js",
                "lodash": "/node_modules/lodash-es/lodash.js"
              }
            }

      section
        h2 import-maps
        h4.headroom You can use in Chrome today
        h2 chrome://flags
        h4.headroom Built-in module infra and import maps
      //- section(data-bespoke-backdrop='danger3')
      //-   h3 ⚠️  DANGER  ⚠️
      //-   h2 Behavior Difference
      //-   h2 Will Robinson
      //-   h3 ⚠️  DANGER  ⚠️

      section
        h1 The code executes differently too!
        
      section
        h1 They have different goals

      section(data-bespoke-backdrop='lolwut')

      section
        h2 4 Types of Goals
        ul
          li.hide 
          li Script Strict
          li Script Sloppy
          li ESmodule
          li Node.js Goal

      section
        h1 What is a top level grammar?

      section
        h2 Strict Mode vs Sloppy Mode
        h3 Denoted with Pragma

      section
        h2 Module goal has extra grammar changes
        ul
          li.hide
          li No HTML Comments
          li Await is a reserved keyword
          li Divergence may increase over time

      section
        h3 ESModules do not have in source way
        h2 of determining goal

      section
        h2 Potential Future Goals
        ul
          li.hide
          li WASM
          li HTML Modules
          li WebPackage
          li BinaryAST

      //- section
      //-   h1 So what happened next?
      //- section(data-bespoke-backdrop='danger4')
      //-   h3 ⚠️  DANGER  ⚠️
      //-   h2 Behavior Difference
      //-   h2 Will Robinson
      //-   h3 ⚠️  DANGER  ⚠️
      //-
      section
        h3 ESM does not have a way
        h2 to inject lexically scope variables

      section
        h1 CJS has lexically scoped variables

      section
        h2 Lexically scoped variables include
        ul
          li.hide
          li __filename
          li __dirname
          li require
          li module

      section
        h2 import.meta to the rescue

      section
        h1 You can use ESM in Node.js Today!
      
      section
        h1 WITH A FLAG

      section
        h2 --experimental-modules

      section
        h2 About our current implementation
        ul
          li.hide
          li Getting close to stable, but could still change
          li ECMAScript compliant implementation
          li ESM files need to use .mjs extension
          li Unless you set type to module in package.json
          li Support for Bare Imports
          li Support for dynamic import in both ESM & CJS

      section
        h2 What are the limitations?
        ul
          li.hide
          li Full file path is mandatory
          li No support for folder resolution
          li No named imports for `import 'cjs'`
          li Only experimental support for `import 'json'`
          li No support for `require('esm')`

      //- section
      //-   h1 Interoperability
      //-
      //- section
      //-   h2 Loading ESM from CJS
      //-   ul
      //-     li.hide
      //-     li dynamic `import(esm)` in cjs
      //-     li Cannot require(esm)

      //- section(data-bespoke-backdrop='grumpy')
      //-   h2 Some of our decisions may have made people grumpy

      //- section
      //-   h3 Introducing
      //-   h2 The Node.js Modules Team
      //-
      //- section(data-bespoke-backdrop='modules-team-init')
      //-   h2 Formed 10 months ago
      //-
      //- section
      //-   h1 49 members
      //-
      //- section
      //-   h3 Representation from at least 10 countries:
      //-   ul
      //-     li.hide
      //-     li Canada
      //-     li China
      //-     li Germany
      //-     li Israel
      //-     li Italy
      //-     li Japan
      //-     li Nigeria
      //-     li United Kingdom
      //-     li South Africa
      //-     li USA
      //-
      //- section
      //-   h3 Representation from at least 10 corporate organizations:
      //-   ul
      //-     li.hide
      //-     li airbnb
      //-     li applitools
      //-     li Bloomberg
      //-     li Godaddy
      //-     li Google
      //-     li Groupon
      //-     li IBM
      //-     li Microsoft
      //-     li Mozilla
      //-     li NearForm
      //-     li Node Source
      //-
      //- section
      //-   h3 Key stakeholders from at least 14 OSS projects
      //-   ul
      //-     li.hide
      //-     li angular
      //-     li babel
      //-     li bluebird
      //-     li fastify
      //-     li libuv
      //-     li jQuery
      //-     li jspm
      //-
      //- section
      //-   h3 Key stakeholders from at least 14 OSS projects
      //-   ul
      //-     li.hide
      //-     li lodash
      //-     li Meteor
      //-     li npm
      //-     li polymer
      //-     li tapjs
      //-     li V8
      //-     li webpack
      //-
      //- section
      //-   h3 Members of the team participate
      //-   h3 in at least 3 standards bodies including:
      //-   ul
      //-     li.hide
      //-     li tc39
      //-     li whatwg
      //-     li w3c

      //- section(data-bespoke-backdrop='kernel')
      //-   h1 Minimal Kernal
      //-
      //- section
      //-   h2 Phase 1
      //-   ul
      //-     li.hide
      //-     li Can only import ESM
      //-     li Must have .mjs file extension
      //-     li No support for Node.js specifier resolution algorithm
      //-
      //- section
      //-   h1 That's it

      //- section
      //-   h1 CJS Interop
      //-
      //- section.small-code
      //-   pre
      //-     code.language-javascript.
      //-       // cjs.js
      //-       module.exports = 'cjs';
      //-
      //-       // esm.mjs
      //-       import { createRequire } from 'module';
      //-
      //-       const require = createRequire(import.meta.url);
      //-
      //-       const cjs = require('./cjs');
      //-       cjs === 'cjs'; // true

      //- section
      //-   h2 Phase 2
      //-   h4 Uncontentious features to enhance UX
      //-
      //- section
      //-   h2 Phase 3
      //-   h4 Extensible "loaders" and deliver an environment that allows user-land experimentation.
      //-
      //- section
      //-   h2 Phase 4
      //-   h4 Addressing the user feedback gathered from the experimentation enabled by Phase 3.

      //- section
        h1 Maybe import.meta.require?

      //- section
      //-   h1 The Future
      //-
      //- section
      //-   h2 ESM is one of many goals
      //-
      //- section
      //-   h3 .mjs is in IETF Standard track
      //-   ul
      //-     li.hide
      //-     li Will land in official mime registry
      //-     li mime types determined by file extension
      //-
      //- section
      //-   h1 .js will always be ambiguous
      //-

      section
        h2 What we are working on?
        ul
          li.hide
          li Package Exports
          li Conditional Exports
          li Self-Reference
          li JSON Modules
          li WASM Modules

      section.small-code
        h2 Package Exports
        pre
          code.language-javascript.
            {
              "main": "index-legacy.cjs",
              "type": "module",
              "exports": {
                "./": "./index.js",
                "./cjs": "./index.cjs"
              }
            }

      section.small-code
        h3 Conditional Exports (Experimental)
        h4 https://github.com/nodejs/node/pull/29978/
        pre
          code.language-javascript.
            {
              "main": "index-legacy.cjs",
              "type": "module",
              "exports": {
                "./": {
                  "module": "./index.js",
                  "node": "./index.cjs",
                  "browser": "./index-browser"
                }
              }
            }

      section.small-code
        h3 Self Reference (Experimental)
        h4 --experimental-resolve-self
        pre
          code.language-javascript.
            {
              "name": "cool-module",
              "exports": {
                "./": "./index.mjs",
                "./feature": "./path/to/feature.mjs"
              }
            }

            import {wow} from 'cool-module/feature'

      section
        h2 Roadmap:
        ul
          li.hide
          li Unflag in Node.js 13 between Q4 19' and Q1 20'
          li Backport all changes to 12 LTS
          li Unflag in 12 during Active LTS

      section
        h2 We are all hard at work
        h3 to ensure modules
        h4 is a best in class experience in Node.js
        h3 and a good base for universal packages

      section
        h2 Thank You
        img.headroom(src='images/best-gif-evar.gif' alt='a surfing puppy' width='20%')
        h4 @MylesBorins

    script(src='build/build.js')
